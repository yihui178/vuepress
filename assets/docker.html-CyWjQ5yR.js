import{_ as l,c as i,b as a,a as n,d as e,e as p,r as d,o as r}from"./app-Dbnb5pkR.js";const c="/vuepress/assets/image-20250915095106202-Hr-uKByN.png",o="/vuepress/assets/image-20250915095339416-CdCxx_Op.png",u="/vuepress/assets/image-20250915095934659-CPTHUDG7.png",m="/vuepress/assets/image-20250915100049362-B7PQqnoj.png",k="/vuepress/assets/image-20250915094358526-Do_kpDQa.png",v="/vuepress/assets/image-20250916132919795-DCiKMpNu.png",b="/vuepress/assets/image-20250916133102736-Dan8GjC7.png",g="/vuepress/assets/image-20250916133147634-BH5Hqqn8.png",h="/vuepress/assets/image-20250916134252912-SSGmoBCR.png",y="/vuepress/assets/image-20250916134433179-2yPnfVog.png",x="/vuepress/assets/image-20250916134704211-8vDdrWtJ.png",D="/vuepress/assets/image-20250916135026838-C1ZXo3JE.png",E="/vuepress/assets/image-20250916135932825-hWsQgAjV.png",T="/vuepress/assets/image-20250915151439490-Daw7lL-3.png",q="/vuepress/assets/06-okqgLvd0.png",w="/vuepress/assets/image-20250915133314854-CWMki9X3.png",f="/vuepress/assets/image-20250915133533706-DTBiQR-k.png",S="/vuepress/assets/image-20250915133649421-2OXnqCE1.png",A="/vuepress/assets/image-20250915134254299-C2ANABjz.png",_="/vuepress/assets/image-20250915153549441-nNDe-DTA.png",R="/vuepress/assets/image-20250915153625737-BeqksfAf.png",L="/vuepress/assets/image-20250915155048943-lyP_Dp-A.png",I="/vuepress/assets/image-20250915161728008-D2JZCCjC.png",N="/vuepress/assets/image-20250915162038836-DN9a8gp4.png",O={},C={href:"https://github.com/asxez/DockerDesktop-CN/releases",target:"_blank",rel:"noopener noreferrer"};function j(M,s){const t=d("ExternalLinkIcon");return r(),i("div",null,[s[3]||(s[3]=a('<h1 id="docker的安装与使用" tabindex="-1"><a class="header-anchor" href="#docker的安装与使用"><span>Docker的安装与使用</span></a></h1><h2 id="一、安装-docker-desktop" tabindex="-1"><a class="header-anchor" href="#一、安装-docker-desktop"><span>一、安装 Docker Desktop</span></a></h2><h3 id="_1-安装之前" tabindex="-1"><a class="header-anchor" href="#_1-安装之前"><span>1. 安装之前</span></a></h3><p>在安装之前，我们实现需要将Windows的某些设置开启一下。</p><p>我们搜索“启用或关闭Windows功能”，去开启我们Docker所需要的选项。</p><p>Windows中的Docker它可以依赖于两种环境，分别是：Hyper-V、WSL。</p><p>第一种是一个虚拟环境，也就是虚拟机，第二中是Windows的Linux子系统(系统要求不低于Window10的2021版本)。</p><p>选择适用于Linux的Windows子系统WSL。</p><p><img src="'+c+`" alt="image-20250915095106202"> <strong>安装Linux子系统</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">下载或者更新</span>
<span class="line">wsl --update</span>
<span class="line">重新启动</span>
<span class="line">wsl --shutdown  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>管理员运行PowerShell，运行开头的两段命令。</p><p><img src="`+o+'" alt="image-20250915095339416"></p><h3 id="_2-安装-docker-desktop" tabindex="-1"><a class="header-anchor" href="#_2-安装-docker-desktop"><span>2. 安装 Docker Desktop</span></a></h3><ol><li><p>下载 Docker Desktop： 访问 Docker 官网：https://www.docker.com/。 点击页面上的“Download for Windows - AMD64”按钮，以下载适用于 Windows 系统的 Docker Desktop 安装文件。</p></li><li><p>安装 Docker Desktop： 双击下载的安装文件，开始安装 Docker Desktop。 按照安装向导的指示完成安装。在安装过程中，将提示安装 WSL 2，建议勾选此选项以获得更好的性能。</p></li><li><p>配置 Docker Desktop： 安装完成后，启动 Docker Desktop。</p></li></ol><p><img src="'+u+'" alt="image-20250915095934659"></p><p>我们需要开启至少这两个选项，这两个选项分别是开启远程连接(当然，是内网)，第二个是说使用WSL来当作Docker的运行系统，不开启就是使用虚拟机了。</p><p>然后我们配置一下镜像源，国外的官方源太慢了。</p><p><img src="'+m+'" alt="image-20250915100049362"></p><p>首次打开时，将出现 Docker 订阅协议，点击 Accept（接受）以继续。</p><p>随后，系统将提示用户登录。您可以选择使用 GitHub 账户或 Google 账户登录，若无上述账户，可选择跳过登录步骤。</p><p>接下来，将出现调查问卷，您可以根据个人喜好选择填写，或直接跳过此步骤。</p><p>最后，Docker Desktop 将正常启动。</p><p><img src="'+k+`" alt="image-20250915094358526"></p><h3 id="_3-docker基础使用" tabindex="-1"><a class="header-anchor" href="#_3-docker基础使用"><span>3. Docker基础使用</span></a></h3><h4 id="对docker操作" tabindex="-1"><a class="header-anchor" href="#对docker操作"><span><strong>对Docker操作</strong></span></a></h4><p>安装完成Docker后,默认每次开机的时候都会自动启动,但我们也可以手动启动,关闭或者重启Docker</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 启动docker</span></span>
<span class="line">sudo service docker start</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 重启docker</span></span>
<span class="line">sudo service docker restart</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 停止docker</span></span>
<span class="line">sudo service docker stop</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对镜像的基础操作" tabindex="-1"><a class="header-anchor" href="#对镜像的基础操作"><span><strong>对镜像的基础操作</strong></span></a></h4><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment">#获取当时所有镜像(docker images)</span></span>
<span class="line">docker image ls</span>
<span class="line"><span class="token comment"># 或者</span></span>
<span class="line">docker images</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image-20250916132919795"></p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>镜像所在的仓库名称</td></tr><tr><td>TAG</td><td>镜像标签</td></tr><tr><td>IMAGEID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像的创建日期(不是获取该镜像的日期)</td></tr><tr><td>SIZE</td><td>镜像大小</td></tr></tbody></table><p><strong>拉去镜像(docker pull)</strong> 除了使用官方的镜像外,我们还可以在仓库中申请一个自己的账号,保存自己制作的进行,或者拉去使用他人的镜像。</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 官方镜像</span></span>
<span class="line">docker image pull 镜像名称 </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 或简写为 </span></span>
<span class="line">docker pull 镜像名称</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 比如</span></span>
<span class="line">docker pull ubuntu</span>
<span class="line">docker pull ubuntu:16.04</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 个人镜像</span></span>
<span class="line">docker pull 仓库名称/镜像名称</span>
<span class="line">docker pull xunmi/django</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第三方仓库拉去</span></span>
<span class="line">docker pull 第三方仓库地址/仓库名称/镜像名称</span>
<span class="line">docker pull hub.c.163.com/library/mysql:latest</span>
<span class="line">(默认仓库名为library,所有从官方获取镜像相当于\`sudo docker image pull library/镜像名称\`)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image-20250916133102736"></p><p><strong>删除镜像(docker rmi)</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker image rm 镜像名或镜像ID 或 docker rmi 镜像名或镜像ID</span>
<span class="line">docker image rm hello-world</span>
<span class="line">docker rmi 9e64176cd8a2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+`" alt="image-20250916133147634"></p><p>删除镜像的前提是没有使用这个镜像的容器,如果有需要先删除容器(报错:Error response from daemon: conflict: unable to delete 镜像ID (must be forced) - image is being used by stopped container 容器ID则代表有容器使用了此镜像。)可以尝试先执行docker rm 容器ID删除容器,如果还报错,可以看我下方删除容器的具体方法。</p><p>几条删除命令的区别</p><p>docker rm: 删除一个或多个 容器 docker rmi: 删除一个或多个 镜像 docker prune: 用来删除不再使用的 docker 对象</p><p><strong>加载镜像(docker run)</strong> 上面我们说过,镜像只是一个只读类型的文件,而我们的环境不可能只是一个这样的文件,所以我们需要把这个镜像加载成我们的环境,也就是让他变成容器。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker run [可选参数] 镜像名 [向启动容器中传入的命令]</span>
<span class="line">运行本项目</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+h+`" alt="image-20250916134252912"></p><table><thead><tr><th><strong>常用可选参数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>-i</td><td>表示以《交互模式》运行容器。</td></tr><tr><td>-d</td><td>会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)。</td></tr><tr><td>-t</td><td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td></tr><tr><td>-name</td><td>为创建的容器命名。(默认会随机给名字,不支持中文字符!!!)</td></tr><tr><td>-v</td><td>表示目录映射关系，即宿主机目录:容器中目录。注意:最好做目录映射，在宿主机上做修改，然后共享到容器上。</td></tr><tr><td>-p</td><td>表示端口映射，即宿主机端口:容器中端口。 比如:<code>-p 8080:80</code> 就是将容器中的80端口,映射到主机中的8080端口</td></tr><tr><td>–network=host</td><td>表示将主机的网络环境映射到容器中，使容器的网络与主机相同。每个 Docker 容器都有自己的网络连接空间连接到虚拟 LAN。使用此命令则会让容器和主机共享一个网络空间。</td></tr></tbody></table><h4 id="对容器的基础操作" tabindex="-1"><a class="header-anchor" href="#对容器的基础操作"><span>对容器的基础操作</span></a></h4><p><strong>查看容器(docker ps)</strong></p><p>查看容器主要会用到ps命令</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 查看当前所有正在运行的容器</span>
<span class="line">docker ps</span>
<span class="line"></span>
<span class="line"># 查看当前所有的容器</span>
<span class="line">docker ps -a</span>
<span class="line"></span>
<span class="line"># 使用过滤器(除了name外,常用的还可以指定id:id= 、所有停止的容器:status=exited,正在运行的容器:status=running 等)</span>
<span class="line">docker ps -f name=指定的名字</span>
<span class="line"></span>
<span class="line"># 显示2个上次创建的容器(2可以改变)</span>
<span class="line">docker ps -n 2</span>
<span class="line"></span>
<span class="line"># 显示最新创建的容器（包括所有状态）</span>
<span class="line">docker ps -l</span>
<span class="line"></span>
<span class="line"># 仅显示ip</span>
<span class="line">docker ps -q</span>
<span class="line"></span>
<span class="line"> # 显示容器大小</span>
<span class="line">docker ps -s</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+`" alt="image-20250916134433179"></p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>CONTAINER ID</td><td>镜像ID</td></tr><tr><td>IMAGE</td><td>创建容器的镜像名称</td></tr><tr><td>COMMAND</td><td>默认启动命令(启动时会自动执行)</td></tr><tr><td>CREATED</td><td>创建容器的日期</td></tr><tr><td>STATUS</td><td>当前的状态(启动了多久,多久之前退出等)</td></tr><tr><td>PORTS</td><td>映射的端口</td></tr><tr><td>NAMES</td><td>容器的名称</td></tr><tr><td>SIZE</td><td>容器大小(使用-s命令参数时才能看到)</td></tr></tbody></table><p><strong>启动和关闭容器</strong></p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 停止容器</span></span>
<span class="line">docker container stop 容器名或容器id</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 或可简写为</span></span>
<span class="line">docker stop 容器名或容器id</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 强制关闭容器</span></span>
<span class="line">docker container kill 容器名或容器id</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 或可简写为</span></span>
<span class="line">docker kill 容器名或容器id</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动容器</span></span>
<span class="line">docker container start 容器名或容器id</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 或可简写为</span></span>
<span class="line">docker start 容器名或容器id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果我们成功启动或者关闭一个容器的话,会返回容器名或者容器id</li><li>stop和kill的区别: stop是比较优雅的关掉一个容器,类似我们正常退出一个软件,而kill是当一个进程出现意外无法正常关闭的时候,我们强行进行关闭,有点像我们使用任务管理器进行结束进程操作</li></ul><p><strong>操作后台容器</strong> 之前我们下过一个kali并且放在了后台运行,如果没有下载可以执行下列命令(docker run -i -d -t --name=kali-test kalilinux/kali-rolling),下面我们就用下面的命令开启kali(如果你下的是其他系统,比如ubuntu也可以举一反三一下) 首先我们确保我们要进入的容器是开启状态的,使用docker ps -a查看其中的STATUS属性是否是Up开头,如果不是先照着上面启动容器的方法开启容器 我们开启容器后,如果需要在容器内执行命令,可以将后台切换到前台,也可能使用docker命令将我们需要执行的命令传入。 操作方法有很多种,这里我们介绍一些比较常用的方法</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token comment"># 如果我只需要执行简单的一两条命令可以使用docker exec</span></span>
<span class="line"><span class="token comment"># 执行单条命令 (-i: 启动并且保留交互式命令行; -t:作用是分配一个虚拟的终端; docker run )</span></span>
<span class="line">docker exec -it 容器名或容器id 执行的命令</span>
<span class="line"><span class="token comment"># 比如</span></span>
<span class="line">docker exec -it mysql mysql -u root -p</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 除了exec外还有attach可以使用,但它有个弊端,多终端启动attach后,都会会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。</span></span>
<span class="line">docker attach 容器名或容器id</span>
<span class="line"><span class="token comment"># 比如</span></span>
<span class="line">docker attach mysql </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+x+`" alt="image-20250916134704211"></p><table><thead><tr><th>exec可选参数</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)。</td></tr><tr><td>-e</td><td>设置环境变量</td></tr><tr><td>-i</td><td>表示以《交互模式》运行容器。</td></tr><tr><td>-t</td><td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td></tr><tr><td>-u</td><td>设置用户名和UID。</td></tr><tr><td>-w</td><td>设置容器内的工作目录。</td></tr></tbody></table><p><strong>删除容器(docker rm)</strong></p><p>如我我们需要删除一个容器,首先需要确保这个容器已经停止了,因为正在运行的容器是无法直接删除。 我们可以运行一下<code>docker ps -a</code>,如果发现没有停止,可以使用<code>docker stop</code>停止(STATUS下已Exited开头则是停止的)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 使用rm删除容器</span>
<span class="line">docker rm 容器名或容器id</span>
<span class="line"># 列如</span>
<span class="line">docker rm docker-test</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+D+`" alt="image-20250916135026838"></p><p><strong>容器制作成镜像</strong></p><p>我们为什么要把容器制作成镜像?</p><ul><li>镜像可以看作为是一种备份,如果我们后期环境出现了问题,可以还原到早期镜像。</li><li>镜像便于传播,可以让自己的其他设备或他人的重复利用变得更加简单容易。</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># 将容器制作成镜像</span>
<span class="line">docker commit 容器名 镜像名</span>
<span class="line"># 镜像打包备份(打包备份的文件会自动存放在当前命令行的路径下,如果想让保存的文件可以打开,可以加.tar后缀)</span>
<span class="line">docker save -o 保存的文件名 镜像名</span>
<span class="line"># 镜像解压</span>
<span class="line">docker load -i 文件路径/备份文件</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将打包备份的镜像可以通过网络发送到其他设备上,使用docker镜像解压即可直接使用你的环境。</p><p><img src="`+E+'" alt="image-20250916135932825"></p><h4 id="docker基础命令" tabindex="-1"><a class="header-anchor" href="#docker基础命令"><span>Docker基础命令</span></a></h4><table><thead><tr><th style="text-align:left;">Docker基础命令</th><th style="text-align:left;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left;">docker pull</td><td style="text-align:left;">拉取镜像</td></tr><tr><td style="text-align:left;">docker push</td><td style="text-align:left;">推送镜像到DockerRegistry</td></tr><tr><td style="text-align:left;">docker images</td><td style="text-align:left;">查看本地镜像</td></tr><tr><td style="text-align:left;">docker rmi</td><td style="text-align:left;">删除本地镜像</td></tr><tr><td style="text-align:left;">docker run</td><td style="text-align:left;">创建并运行容器（不能重复创建）</td></tr><tr><td style="text-align:left;">docker stop</td><td style="text-align:left;">停止指定容器</td></tr><tr><td style="text-align:left;">docker start</td><td style="text-align:left;">启动指定容器</td></tr><tr><td style="text-align:left;">docker restart</td><td style="text-align:left;">重新启动容器</td></tr><tr><td style="text-align:left;">docker rm</td><td style="text-align:left;">删除指定容器</td></tr><tr><td style="text-align:left;">docker ps</td><td style="text-align:left;">查看容器</td></tr><tr><td style="text-align:left;">docker logs</td><td style="text-align:left;">查看容器运行日志</td></tr><tr><td style="text-align:left;">docker exec</td><td style="text-align:left;">进入容器</td></tr><tr><td style="text-align:left;">docker save</td><td style="text-align:left;">保存镜像到本地压缩文件</td></tr><tr><td style="text-align:left;">docker load</td><td style="text-align:left;">加载本地压缩文件到镜像</td></tr><tr><td style="text-align:left;">docker inspect</td><td style="text-align:left;">查看容器详细信息</td></tr></tbody></table><h2 id="二、汉化-docker-desktop-可选" tabindex="-1"><a class="header-anchor" href="#二、汉化-docker-desktop-可选"><span>二、汉化 Docker Desktop（可选）</span></a></h2><p>若想使 Docker Desktop 显示中文界面，按照以下步骤进行汉化：</p>',71)),n("ol",null,[n("li",null,[s[1]||(s[1]=e("下载对应版本的中文语言包： 访问 GitHub，下载适用于 Docker Desktop 的中文语言包，链接地址为：",-1)),n("a",C,[s[0]||(s[0]=e("DockerDesktop-CN",-1)),p(t)]),s[2]||(s[2]=e("。",-1))])]),s[4]||(s[4]=a('<p>将下载的文件解压至 C:\\Program Files\\Docker 目录下（即 Docker 的安装根目录）。</p><ol start="2"><li><p>检查 Docker Desktop 版本： 启动 Docker Desktop，版本号将在右下角显示。</p></li><li><p>备份并替换 app.asar 文件： 打开 Docker Desktop 中文语言包，选择与您 Docker 版本相符的 app.asar 文件并复制。</p></li></ol><p>导航至 Docker 的安装目录，路径默认为： C:\\Program Files\\Docker\\Docker\\frontend\\resources 在该目录下找到 app.asar 文件，建议先备份原文件，然后将复制的中文语言包中的 app.asar 文件粘贴并替换原有文件。</p><ol start="4"><li>重新启动 Docker Desktop： 完成替换后，请关闭 Docker Desktop，然后重新启动该程序。此时，Docker Desktop 应该以中文界面显示。</li></ol><p><img src="'+T+`" alt="image-20250915151439490"></p><h2 id="三、docker-desktop安装redis" tabindex="-1"><a class="header-anchor" href="#三、docker-desktop安装redis"><span>三、Docker Desktop安装Redis</span></a></h2><p>win+R打开windows命令行窗口</p><p>输入以下命令拉取redis镜像 #默认拉去最新版本（redis：+版本名 [拉取指定redis版本]）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker pull redis  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+q+'" alt="06"></p><p>接下来就可以通过DockerDeskTop查看是否将镜像导入成功</p><p><img src="'+w+`" alt="image-20250915133314854"></p><p>快速启动Redis</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker run -d --name myredis -p 6379:6379 redis</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+f+`" alt="image-20250915133533706"></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker run --name redis -p 6379:6379 -v /docker/host/dir:/data -d redis redis-server --appendonly yes --requirepass 123456</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">-p 6379:6379 端口映射：前表示主机部分，：后表示容器部分。</span>
<span class="line"></span>
<span class="line">--name redis 指定该容器名称，查看和进行操作都比较方便。</span>
<span class="line"></span>
<span class="line">-v 挂载文件或目录 ：前表示主机部分，：后表示容器部分。</span>
<span class="line"></span>
<span class="line">-d redis 表示后台启动redis</span>
<span class="line"></span>
<span class="line">//redis-server /etc/redis/redis.conf 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/usr/local/docker/redis.conf</span>
<span class="line"></span>
<span class="line">--appendonly yes 开启redis 持久化</span>
<span class="line"></span>
<span class="line">--requirepass 123456 设置密码为123456</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们可以点击左侧Containers查看已经启动的容器</p><p><img src="`+S+`" alt="image-20250915133649421"></p><p>接着我们回到命令行中输入docker ps命令查看当前正在运行的容器</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker ps</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着我们输入指令 myredis为需要连接进入的容器名即NAMES</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker exec -it myredis bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时输入指令连接redis-cli命令客户端</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">redis-cli</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+A+`" alt="image-20250915134254299"></p><p>此时就可以使用redis指令执行操作了</p><p>当你觉得每次项目启动前需要启动容器过于繁琐可以开启容器自启动[&#39;redis&#39;为你的容器名称]</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker update --restart=always redis</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="redis-基本使用" tabindex="-1"><a class="header-anchor" href="#redis-基本使用"><span>Redis 基本使用</span></a></h3><p><strong>进入 Redis 客户端</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">redis-cli</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>常见命令</strong></p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre><code><span class="line"># 测试连接</span>
<span class="line">PING             → PONG</span>
<span class="line"></span>
<span class="line"># 设置与获取键值</span>
<span class="line">SET name &quot;Tom&quot;</span>
<span class="line">GET name         → &quot;Tom&quot;</span>
<span class="line"></span>
<span class="line"># 删除键</span>
<span class="line">DEL name</span>
<span class="line"></span>
<span class="line"># 判断键是否存在</span>
<span class="line">EXISTS name</span>
<span class="line"></span>
<span class="line"># 查看所有键</span>
<span class="line">KEYS *</span>
<span class="line"></span>
<span class="line"># 设置键过期时间（秒）</span>
<span class="line">EXPIRE name 10</span>
<span class="line">TTL name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><p>Redis 支持两种持久化方式：</p><ol><li>RDB（快照）：定时保存数据库快照到磁盘（体积小，恢复快）。</li><li>AOF（追加文件）：记录每条写操作日志（更安全，适合重要数据）。</li></ol><p>开启 AOF：</p><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf" data-title="conf"><pre><code><span class="line">appendonly yes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><p><strong>总结：</strong></p><p>Redis**-**cli常用命令：<code>SET</code>、<code>GET</code>、<code>DEL</code>、<code>EXPIRE</code>、<code>KEYS</code>。</p><p>数据结构：String、Hash、List、Set、ZSet。</p><p>持久化：RDB（快照）+ AOF（日志）。</p><h2 id="四、docker-desktop安装mysql" tabindex="-1"><a class="header-anchor" href="#四、docker-desktop安装mysql"><span>四、Docker Desktop安装MySQL</span></a></h2><p>在Docker Desktop安装Redis的基础上</p><p>终端运行命令</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line">docker pull mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+_+`" alt="image-20250915153549441"></p><p>D盘创建目录docker/mysql/conf,docker/mysql/data</p><p>这是mysql的配置文件和存储数据用的目录</p><p>切换到终端，输入命令，第一次启动MySQL容器</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line">docker run --name mysql -p 3306:3306 ^</span>
<span class="line">-e MYSQL_ROOT_PASSWORD=123456 ^</span>
<span class="line">-d mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+R+`" alt="image-20250915153625737"></p><p>命令解释:</p><p>run --name mysql</p><p>–name为容器指定名称为mysql</p><p>-p 3306:3306</p><p>指定端口映射，将主机端口3306映射到容器端口3306</p><p>-e MYSQL_ROOT_PASSWORD=123456</p><p>-e设置环境变量 ，设置root用户，密码123456</p><p>-d mysql:latest --default-authentication-plugin=mysql_native_password</p><p>-d后台运行，并返回容器ID ,mysql:latest 镜像名</p><p>准备复制MySQL镜像中的配置文件到刚刚创建的本地持久化目录</p><p>D:/docker/mysql/conf/</p><p>打开docker桌面，点击Images镜像==》选择mysql镜像==》点击In use进入容器==》</p><p>点击name:mysql==》点击Files==》打开目录etc/my.cnf点击下载到目录D:/docker/mysql/conf/</p><p>关闭容器</p><p>终端执行命令</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line">关闭容器</span>
<span class="line">docker stop mysql</span>
<span class="line"></span>
<span class="line">删除容器</span>
<span class="line">docker rm mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+L+`" alt="image-20250915155048943"></p><p>重新启动容器，执行命令</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line">docker run --name mysql -p 3306:3306 ^</span>
<span class="line">  -v //d/HBBTJ/Docker/mysql/data:/var/lib/mysql ^</span>
<span class="line">  -v //d/HBBTJ/Docker/mysql/conf/my.cnf:/etc/mysql/my.cnf ^</span>
<span class="line">  -e MYSQL_ROOT_PASSWORD=123456 ^</span>
<span class="line">  -d mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-v //d/HBBTJ/Docker/mysql/data:/var/lib/mysql</p><p>映射主机目录d盘的/docker/mysql/data 到容器的/var/lib/mysql/目录</p><p><img src="`+I+`" alt="image-20250915161728008"></p><p>测试是否持久化</p><p>进入 MySQL 容器：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker exec -it mysql mysql -uroot -p</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>新建数据库：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CREATE DATABASE testdb;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看 <code>D:\\docker\\mysql\\data</code>，应该能看到 <code>testdb</code> 文件夹。</p><p><img src="`+N+`" alt="image-20250915162038836"></p><p>数据会存到 Docker 管理的 volume 里，用 <code>docker volume ls</code> 可以查看。</p><h3 id="mysql-基本使用" tabindex="-1"><a class="header-anchor" href="#mysql-基本使用"><span>MySQL 基本使用</span></a></h3><p><strong>登录、退出</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Linux / Docker 容器内</span></span>
<span class="line">mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 指定主机和端口</span></span>
<span class="line">mysql <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-P</span> <span class="token number">3306</span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#退出</span></span>
<span class="line"><span class="token builtin class-name">exit</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-基础命令" tabindex="-1"><a class="header-anchor" href="#_1-基础命令"><span>1. 基础命令</span></a></h4><table><thead><tr><th>命令</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>show databases;</code></td><td>查看所有数据库</td><td>-</td></tr><tr><td><code>use 库名;</code></td><td>切换数据库</td><td><code>use school;</code></td></tr><tr><td><code>show tables;</code></td><td>查看表</td><td>-</td></tr><tr><td><code>desc 表名;</code></td><td>查看表结构</td><td><code>desc student;</code></td></tr><tr><td><code>create database 库名;</code></td><td>创建数据库</td><td><code>create database testdb;</code></td></tr></tbody></table><h4 id="_2-数据库与表" tabindex="-1"><a class="header-anchor" href="#_2-数据库与表"><span>2. 数据库与表</span></a></h4><p><strong>数据库管理</strong></p><ul><li><p>创建：<code>CREATE DATABASE [IF NOT EXISTS] 库名;</code></p></li><li><p>删除：<code>DROP DATABASE [IF EXISTS] 库名;</code></p></li><li><p>查看：<code>SHOW DATABASES;</code></p></li></ul><p><strong>表结构设计</strong></p><ul><li><strong>列类型</strong>：数值（int、bigint）、字符串（varchar、text）、时间（datetime）</li><li><strong>字段属性</strong>：UnSigned（非负）、Auto_InCrement（自增）、DEFAULT（默认值）</li><li><strong>创建示例</strong></li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;学号&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;匿名&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>表修改与删除</strong></p><ul><li>重命名：<code>ALTER TABLE 旧名 RENAME AS 新名;</code></li><li>增字段：<code>ALTER TABLE 表名 ADD 字段 类型;</code></li><li>删表：<code>DROP TABLE IF EXISTS 表名;</code></li></ul><h4 id="_3-数据操作-dml" tabindex="-1"><a class="header-anchor" href="#_3-数据操作-dml"><span>3. 数据操作（DML）</span></a></h4><p><strong>插入（INSERT</strong>）</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 单条</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 多条</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>pwd<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改（UPDATE）</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;张三2024&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 加条件避免全表修改</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>删除（DELETE）</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 必加WHERE</span></span>
<span class="line"><span class="token comment">-- 重置自增用TRUNCATE（不可回滚）</span></span>
<span class="line"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-数据查询-dql" tabindex="-1"><a class="header-anchor" href="#_4-数据查询-dql"><span>4. 数据查询（DQL）</span></a></h4><p><strong>基础查询</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span> <span class="token comment">-- 指定字段</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> result<span class="token punctuation">;</span> <span class="token comment">-- 去重</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>条件查询（WHERE）</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 区间</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> result <span class="token keyword">WHERE</span> score <span class="token operator">BETWEEN</span> <span class="token number">90</span> <span class="token operator">AND</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 模糊查询</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">LIKE</span> <span class="token string">&#39;%张%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分组与聚合</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 按科目查平均分（&gt;90）</span></span>
<span class="line"><span class="token keyword">SELECT</span> subject<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">FROM</span> result </span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> subject </span>
<span class="line"><span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">90</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>连接查询</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 学生-年级关联</span></span>
<span class="line"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>g<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>gradeName<span class="token punctuation">\`</span></span> </span>
<span class="line"><span class="token keyword">FROM</span> student s</span>
<span class="line"><span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> grade g <span class="token keyword">ON</span> s<span class="token punctuation">.</span>gradeId<span class="token operator">=</span>g<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>排序与分页</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 排序</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 分页（第1页，5条）</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-高级特性" tabindex="-1"><a class="header-anchor" href="#_5-高级特性"><span>5. 高级特性</span></a></h4><p><strong>MD5 加密</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 插入加密</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> testMD5 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>MD5<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 校验</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> testMD5 <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token operator">=</span><span class="token string">&#39;张三&#39;</span> <span class="token operator">AND</span> pwd<span class="token operator">=</span>MD5<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事务管理</strong></p><ul><li><strong>ACID</strong>：原子性、一致性、隔离性、持久性</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SET</span> autocommit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">-- 关自动提交</span></span>
<span class="line"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span> <span class="token comment">-- 启事务</span></span>
<span class="line"><span class="token comment">-- SQL操作</span></span>
<span class="line"><span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token comment">-- 成功提交</span></span>
<span class="line"><span class="token comment">-- ROLLBACK; -- 失败回滚</span></span>
<span class="line"><span class="token keyword">SET</span> autocommit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 恢复</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>索引</strong></p><ul><li>分类：主键索引、普通索引、唯一索引</li><li>创建：<code>CREATE INDEX idx_name ON student(</code>name<code>);</code></li><li>原则：查询字段加索引，小表 / 频繁更新字段不加</li></ul><p><strong>用户与权限</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;tom&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> testdb<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;tom&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line">FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>                       <span class="token comment">-- 刷新权限</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>数据库备份与恢复</strong></p><p>备份</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">mysqldump <span class="token operator">-</span>u root <span class="token operator">-</span>p testdb <span class="token operator">&gt;</span> testdb<span class="token punctuation">.</span><span class="token keyword">sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>恢复</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p testdb <span class="token operator">&lt;</span> testdb<span class="token punctuation">.</span><span class="token keyword">sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>安装方式：Linux <code>apt/yum</code>、Windows Installer、Docker（推荐）。</p><p>核心命令：<code>CREATE DATABASE</code>、<code>CREATE TABLE</code>、<code>INSERT</code>、<code>SELECT</code>、<code>UPDATE</code>、<code>DELETE</code>。</p><p>管理工具：命令行 (<code>mysql</code>)，图形化工具（MySQL Workbench、Navicat、DBeaver）。</p><p>生产环境推荐：Docker + 数据持久化 + AOF 备份。</p>`,135))])}const W=l(O,[["render",j]]),P=JSON.parse('{"path":"/docs/theme-reco/test/doker/docker.html","title":"Docker的安装和使用","lang":"en-US","frontmatter":{"title":"Docker的安装和使用","date":"2025/09/18","tags":["Docker","Mysql","Redis"],"categories":["练习"]},"headers":[{"level":2,"title":"一、安装 Docker Desktop","slug":"一、安装-docker-desktop","link":"#一、安装-docker-desktop","children":[{"level":3,"title":"1. 安装之前","slug":"_1-安装之前","link":"#_1-安装之前","children":[]},{"level":3,"title":"2. 安装 Docker Desktop","slug":"_2-安装-docker-desktop","link":"#_2-安装-docker-desktop","children":[]},{"level":3,"title":"3. Docker基础使用","slug":"_3-docker基础使用","link":"#_3-docker基础使用","children":[]}]},{"level":2,"title":"二、汉化 Docker Desktop（可选）","slug":"二、汉化-docker-desktop-可选","link":"#二、汉化-docker-desktop-可选","children":[]},{"level":2,"title":"三、Docker Desktop安装Redis","slug":"三、docker-desktop安装redis","link":"#三、docker-desktop安装redis","children":[{"level":3,"title":"Redis 基本使用","slug":"redis-基本使用","link":"#redis-基本使用","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"四、Docker Desktop安装MySQL","slug":"四、docker-desktop安装mysql","link":"#四、docker-desktop安装mysql","children":[{"level":3,"title":"MySQL 基本使用","slug":"mysql-基本使用","link":"#mysql-基本使用","children":[]}]}],"git":{"createdTime":1759215115000,"updatedTime":1759215115000,"contributors":[{"name":"Yin Jin Peng","email":"18332585277@163.com","commits":1}]},"filePathRelative":"docs/theme-reco/test/doker/docker.md"}');export{W as comp,P as data};
